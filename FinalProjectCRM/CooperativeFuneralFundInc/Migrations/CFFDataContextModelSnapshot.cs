// <auto-generated />
using System;
using CooperativeFuneralFundInc.Models.SupplyRequest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CooperativeFuneralFundInc.Migrations
{
    [DbContext(typeof(CFFDataContext))]
    partial class CFFDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.ClientSupplier", b =>
                {
                    b.Property<int>("ClientSupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientSupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientSupplierID");

                    b.ToTable("ClientSuppliers");

                    b.HasData(
                        new
                        {
                            ClientSupplierID = 1,
                            ClientSupplierName = "Client 1"
                        },
                        new
                        {
                            ClientSupplierID = 2,
                            ClientSupplierName = "Client 2"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.NotesSection", b =>
                {
                    b.Property<int>("NotesSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestOriginId")
                        .HasColumnType("int");

                    b.HasKey("NotesSectionId");

                    b.HasIndex("RequestOriginId");

                    b.ToTable("NotesSection");

                    b.HasData(
                        new
                        {
                            NotesSectionId = 1,
                            Archived = false,
                            CreatedBy = "Developer",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Note = "Test note",
                            RequestOriginId = 1
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderItemsName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderItemsID");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemsID = 1,
                            OrderItemsName = "Preneed agreement"
                        },
                        new
                        {
                            OrderItemsID = 2,
                            OrderItemsName = "Account update/Claim form"
                        },
                        new
                        {
                            OrderItemsID = 3,
                            OrderItemsName = "Itemizations form"
                        },
                        new
                        {
                            OrderItemsID = 4,
                            OrderItemsName = "Return envelopes."
                        },
                        new
                        {
                            OrderItemsID = 5,
                            OrderItemsName = "Postage paid envelopes."
                        },
                        new
                        {
                            OrderItemsID = 6,
                            OrderItemsName = "Deposit tickets"
                        },
                        new
                        {
                            OrderItemsID = 7,
                            OrderItemsName = "Planning guides"
                        },
                        new
                        {
                            OrderItemsID = 8,
                            OrderItemsName = "Funding your funeral in advance brochure"
                        },
                        new
                        {
                            OrderItemsID = 9,
                            OrderItemsName = "Monthly monitors"
                        },
                        new
                        {
                            OrderItemsID = 10,
                            OrderItemsName = "Service and merchandise forms"
                        },
                        new
                        {
                            OrderItemsID = 11,
                            OrderItemsName = "Investment election form"
                        },
                        new
                        {
                            OrderItemsID = 12,
                            OrderItemsName = "Other"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerID");

                    b.ToTable("OwnerNames");

                    b.HasData(
                        new
                        {
                            OwnerID = 1,
                            OwnerName = "Person 1"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.RequestOrigin", b =>
                {
                    b.Property<int>("RequestOriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestOriginDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestOriginId");

                    b.ToTable("RequestOrigins");

                    b.HasData(
                        new
                        {
                            RequestOriginId = 1,
                            RequestOriginDescription = "Phone"
                        },
                        new
                        {
                            RequestOriginId = 2,
                            RequestOriginDescription = "Fax"
                        },
                        new
                        {
                            RequestOriginId = 3,
                            RequestOriginDescription = "Email"
                        },
                        new
                        {
                            RequestOriginId = 4,
                            RequestOriginDescription = "Mail"
                        },
                        new
                        {
                            RequestOriginId = 5,
                            RequestOriginDescription = "Regional manager"
                        },
                        new
                        {
                            RequestOriginId = 6,
                            RequestOriginDescription = "Other"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.RequestType", b =>
                {
                    b.Property<int>("RequestTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestTypeID");

                    b.ToTable("SupplyRequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeID = 1,
                            RequestTypeDescription = "Vendor"
                        },
                        new
                        {
                            RequestTypeID = 2,
                            RequestTypeDescription = "Client"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusDescription = "New"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusDescription = "In-Process"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusDescription = "Completed"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusDescription = "On hold"
                        },
                        new
                        {
                            StatusID = 5,
                            StatusDescription = "Cancelled"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.SupplyRequest.SupplyRequest", b =>
                {
                    b.Property<int>("SupplyRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientSupplierID")
                        .HasColumnType("int");

                    b.Property<string>("CreateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemsID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("RequestOriginId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeID")
                        .HasColumnType("int");

                    b.Property<string>("StatusComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplyRequestId");

                    b.HasIndex("ClientSupplierID");

                    b.HasIndex("OrderItemsID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("RequestOriginId");

                    b.HasIndex("RequestTypeID");

                    b.HasIndex("StatusID");

                    b.ToTable("SupplyRequests");

                    b.HasData(
                        new
                        {
                            SupplyRequestId = 1,
                            ClientSupplierID = 1,
                            CreateTime = "Test",
                            CreatedBy = "Test",
                            OrderItemsID = 1,
                            OwnerID = 1,
                            RequestOriginId = 1,
                            RequestTypeID = 1,
                            StatusComments = "test",
                            StatusID = 1,
                            UpdatedBy = "Test"
                        });
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.DropDownMenu.NotesSection", b =>
                {
                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.RequestOrigin", "RequestOriginDescription")
                        .WithMany()
                        .HasForeignKey("RequestOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CooperativeFuneralFundInc.Models.SupplyRequest.SupplyRequest", b =>
                {
                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.ClientSupplier", "Client")
                        .WithMany()
                        .HasForeignKey("ClientSupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.OrderItems", "OrderItems")
                        .WithMany()
                        .HasForeignKey("OrderItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.RequestOrigin", "SupplyRequestOrigin")
                        .WithMany()
                        .HasForeignKey("RequestOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.RequestType", "RequestTypeDescription")
                        .WithMany()
                        .HasForeignKey("RequestTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.DropDownMenu.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CooperativeFuneralFundInc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CooperativeFuneralFundInc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CooperativeFuneralFundInc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CooperativeFuneralFundInc.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
